/**
 * Servi√ßo para gerenciar notifica√ß√µes no Firestore
 */

import {
  collection,
  addDoc,
  query,
  where,
  orderBy,
  limit,
  getDocs,
  doc,
  updateDoc,
  onSnapshot,
  startAfter as firestoreStartAfter,
  Timestamp,
  WriteBatch,
  writeBatch,
  arrayRemove,
} from "firebase/firestore";
import { db } from "@/firebase/config";
import type {
  Notificacao,
  NovaNotificacao,
  FiltrosNotificacao,
  TipoNotificacao,
  AcaoNotificacao,
} from "@/lib/types/notificacao";

/**
 * Cria uma nova notifica√ß√£o para um usu√°rio
 */
export async function criarNotificacao(
  notificacao: NovaNotificacao
): Promise<string | null> {
  try {
    const now = new Date();
    const notificacaoData = {
      ...notificacao,
      timestamp: now.toISOString(),
      createdAt: now.toISOString(),
      lida: false,
    };

    const docRef = await addDoc(
      collection(db, "users", notificacao.userId, "notificacoes"),
      notificacaoData
    );

    console.log("‚úÖ Notifica√ß√£o criada:", docRef.id);
    return docRef.id;
  } catch (error) {
    console.error("‚ùå Erro ao criar notifica√ß√£o:", error);
    return null;
  }
}

/**
 * Busca notifica√ß√µes de um usu√°rio
 */
export async function buscarNotificacoes(
  userId: string,
  filtros: FiltrosNotificacao = {}
): Promise<Notificacao[]> {
  try {
    const {
      limit: queryLimit = 20,
      apenasNaoLidas = false,
      tipo,
      acao,
      startAfter,
    } = filtros;

    let notificacoesQuery = query(
      collection(db, "users", userId, "notificacoes"),
      orderBy("timestamp", "desc")
    );

    // Filtrar apenas n√£o lidas
    if (apenasNaoLidas) {
      notificacoesQuery = query(notificacoesQuery, where("lida", "==", false));
    }

    // Filtrar por tipo
    if (tipo) {
      notificacoesQuery = query(notificacoesQuery, where("tipo", "==", tipo));
    }

    // Filtrar por a√ß√£o
    if (acao) {
      notificacoesQuery = query(notificacoesQuery, where("acao", "==", acao));
    }

    // Pagina√ß√£o
    if (startAfter) {
      // Implementar pagina√ß√£o se necess√°rio
    }

    // Aplicar limite
    notificacoesQuery = query(notificacoesQuery, limit(queryLimit));

    const snapshot = await getDocs(notificacoesQuery);
    const notificacoes: Notificacao[] = [];

    snapshot.forEach((doc) => {
      const data = doc.data();
      notificacoes.push({
        id: doc.id,
        ...data,
      } as Notificacao);
    });

    return notificacoes;
  } catch (error) {
    console.error("‚ùå Erro ao buscar notifica√ß√µes:", error);
    return [];
  }
}

/**
 * Marca uma notifica√ß√£o como lida
 */
export async function marcarComoLida(
  userId: string,
  notificacaoId: string
): Promise<boolean> {
  try {
    const notificacaoRef = doc(
      db,
      "users",
      userId,
      "notificacoes",
      notificacaoId
    );

    await updateDoc(notificacaoRef, {
      lida: true,
    });

    console.log("‚úÖ Notifica√ß√£o marcada como lida:", notificacaoId);
    return true;
  } catch (error) {
    console.error("‚ùå Erro ao marcar notifica√ß√£o como lida:", error);
    return false;
  }
}

/**
 * Marca todas as notifica√ß√µes como lidas
 */
export async function marcarTodasComoLidas(userId: string): Promise<boolean> {
  try {
    const notificacoesQuery = query(
      collection(db, "users", userId, "notificacoes"),
      where("lida", "==", false)
    );

    const snapshot = await getDocs(notificacoesQuery);
    const batch = writeBatch(db);

    snapshot.forEach((doc) => {
      batch.update(doc.ref, { lida: true });
    });

    await batch.commit();

    console.log(`‚úÖ ${snapshot.size} notifica√ß√µes marcadas como lidas`);
    return true;
  } catch (error) {
    console.error("‚ùå Erro ao marcar todas as notifica√ß√µes como lidas:", error);
    return false;
  }
}

/**
 * Conta notifica√ß√µes n√£o lidas de um usu√°rio
 */
export async function contarNotificacaoesNaoLidas(
  userId: string
): Promise<number> {
  try {
    const notificacoesQuery = query(
      collection(db, "users", userId, "notificacoes"),
      where("lida", "==", false)
    );

    const snapshot = await getDocs(notificacoesQuery);
    return snapshot.size;
  } catch (error) {
    console.error("‚ùå Erro ao contar notifica√ß√µes n√£o lidas:", error);
    return 0;
  }
}

/**
 * Listener em tempo real para notifica√ß√µes de um usu√°rio
 */
export function escutarNotificacoes(
  userId: string,
  callback: (notificacoes: Notificacao[]) => void,
  filtros: FiltrosNotificacao = {}
) {
  const { limit: queryLimit = 20, apenasNaoLidas = false } = filtros;

  let notificacoesQuery = query(
    collection(db, "users", userId, "notificacoes"),
    orderBy("timestamp", "desc"),
    limit(queryLimit)
  );

  if (apenasNaoLidas) {
    notificacoesQuery = query(notificacoesQuery, where("lida", "==", false));
  }

  return onSnapshot(
    notificacoesQuery,
    (snapshot) => {
      const notificacoes: Notificacao[] = [];

      snapshot.forEach((doc) => {
        const data = doc.data();
        notificacoes.push({
          id: doc.id,
          ...data,
        } as Notificacao);
      });

      callback(notificacoes);
    },
    (error) => {
      console.error("‚ùå Erro no listener de notifica√ß√µes:", error);
      callback([]);
    }
  );
}

/**
 * Busca usu√°rios que t√™m uma m√∫sica espec√≠fica em suas playlists
 */
export async function buscarUsuariosComMusicaEmPlaylists(
  trackId: string
): Promise<string[]> {
  try {
    // Buscar todas as playlists que cont√™m esta m√∫sica
    const playlistsQuery = query(
      collection(db, "playlists"),
      where("tracks", "array-contains", trackId)
    );

    const snapshot = await getDocs(playlistsQuery);
    const userIds = new Set<string>();

    snapshot.forEach((doc) => {
      const data = doc.data();
      if (data.createdBy) {
        userIds.add(data.createdBy);
      }
    });

    console.log(
      `üìã Encontrados ${userIds.size} usu√°rios com a m√∫sica ${trackId} em playlists`
    );
    return Array.from(userIds);
  } catch (error) {
    console.error("‚ùå Erro ao buscar usu√°rios com m√∫sica em playlists:", error);
    return [];
  }
}

// Fun√ß√µes espec√≠ficas para cada tipo de notifica√ß√£o

/**
 * Notifica que uma m√∫sica foi adicionada a uma playlist
 */
export async function notificarMusicaAdicionadaPlaylist(
  autorMusicaId: string,
  nomeMusica: string,
  nomePlaylist: string,
  nomeUsuario: string,
  musicaId: string
): Promise<string | null> {
  if (!autorMusicaId) return null;

  return criarNotificacao({
    userId: autorMusicaId,
    mensagem: `Sua m√∫sica "${nomeMusica}" foi adicionada √† playlist "${nomePlaylist}" por ${nomeUsuario}`,
    tipo: "info",
    acao: "playlist",
    origemId: musicaId,
  });
}

/**
 * Notifica que uma m√∫sica foi atualizada
 */
export async function notificarMusicaAtualizada(
  usuariosAfetados: string[],
  nomeMusica: string,
  musicaId: string
): Promise<boolean> {
  try {
    const promises = usuariosAfetados.map((userId) =>
      criarNotificacao({
        userId,
        mensagem: `A m√∫sica "${nomeMusica}" foi atualizada pelo autor.`,
        tipo: "alerta",
        acao: "edicao",
        origemId: musicaId,
      })
    );

    await Promise.all(promises);
    return true;
  } catch (error) {
    console.error("‚ùå Erro ao notificar m√∫sica atualizada:", error);
    return false;
  }
}

/**
 * Notifica que uma m√∫sica foi removida
 */
export async function notificarMusicaRemovida(
  usuariosAfetados: string[],
  nomeMusica: string,
  musicaId: string
): Promise<boolean> {
  try {
    const promises = usuariosAfetados.map((userId) =>
      criarNotificacao({
        userId,
        mensagem: `A m√∫sica "${nomeMusica}" foi removida pelo autor e retirada da sua playlist.`,
        tipo: "erro",
        acao: "edicao",
        origemId: musicaId,
      })
    );

    await Promise.all(promises);
    return true;
  } catch (error) {
    console.error("‚ùå Erro ao notificar m√∫sica removida:", error);
    return false;
  }
}

/**
 * Notifica novo coment√°rio na m√∫sica
 */
export async function notificarNovoComentario(
  autorMusicaId: string,
  nomeMusica: string,
  autorComentario: string,
  musicaId: string
): Promise<string | null> {
  if (!autorMusicaId) return null;

  return criarNotificacao({
    userId: autorMusicaId,
    mensagem: `Novo coment√°rio em "${nomeMusica}": ${autorComentario}`,
    tipo: "info",
    acao: "comentario",
    origemId: musicaId,
  });
}

/**
 * Notifica aprova√ß√£o de coment√°rio
 */
export async function notificarComentarioAprovado(
  autorComentarioId: string,
  nomeMusica: string,
  comentarioId: string
): Promise<string | null> {
  if (!autorComentarioId) return null;

  return criarNotificacao({
    userId: autorComentarioId,
    mensagem: `Seu coment√°rio na faixa "${nomeMusica}" foi aprovado.`,
    tipo: "sucesso",
    acao: "moderacao",
    origemId: comentarioId,
  });
}

/**
 * Notifica rejei√ß√£o de coment√°rio
 */
export async function notificarComentarioRejeitado(
  autorComentarioId: string,
  nomeMusica: string,
  comentarioId: string
): Promise<string | null> {
  if (!autorComentarioId) return null;

  return criarNotificacao({
    userId: autorComentarioId,
    mensagem: `Seu coment√°rio na faixa "${nomeMusica}" foi rejeitado.`,
    tipo: "erro",
    acao: "moderacao",
    origemId: comentarioId,
  });
}

/**
 * Remove uma m√∫sica de todas as playlists quando ela √© deletada
 */
export async function removerMusicaDePlaylists(
  trackId: string
): Promise<boolean> {
  try {
    // Buscar todas as playlists que cont√™m esta m√∫sica
    const playlistsQuery = query(
      collection(db, "playlists"),
      where("tracks", "array-contains", trackId)
    );

    const snapshot = await getDocs(playlistsQuery);
    const batch = writeBatch(db);

    snapshot.forEach((doc) => {
      const playlistRef = doc.ref;
      batch.update(playlistRef, {
        tracks: arrayRemove(trackId),
        updatedAt: new Date(),
      });
    });

    await batch.commit();

    console.log(`‚úÖ M√∫sica ${trackId} removida de ${snapshot.size} playlists`);
    return true;
  } catch (error) {
    console.error("‚ùå Erro ao remover m√∫sica das playlists:", error);
    return false;
  }
}
